//Dont change it
requirejs(['ext_editor_io', 'jquery_190', 'raphael_210'],
    function (extIO, $, TableComponent) {
        function squareBoardCanvas(dom, input) {
            const attr = {
                number: {
                    'stroke': '#2080B8',
                    "stroke-width": 0.0,
                    'fill': '#2080B8',
                },
                you: {
                    'stroke': '#2080B8',
                    "stroke-width": 0.0,
                    'fill': 'orange',
                },
                rect: {
                    empty: {
                        'stroke': '#2080B8',
                        'stroke-width': 0.5,
                    },
                },
                line: {
                    'stroke': 'orange',
                    'stroke-linejoin': 'round',
                    'stroke-linecap': 'round',
                }
            };

            /*----------------------------------------------*
             *
             * input
             *
             *----------------------------------------------*/
            const [edge, you, die] = input

            /*----------------------------------------------*
             *
             * square board
             *
             *----------------------------------------------*/
            const max_width = 300
            const os = 10
            const paper = Raphael(dom, max_width, max_width, 0, 0)
            const SIZE = (max_width - os*2) / edge
            const [h, w] = [edge, edge]
            const tokens = [
                    // shoes
                    "m -8,12 c -1.69,-0.21 -2.55,-0.64 -2.86,-1.44 -0.27,-0.71 -0.09,-2.76 0.27,-3.07 0.07,-0.05 0.92,-0.62 1.89,-1.25 3.71,-2.40 5.00,-3.54 5.71,-5.02 0.54,-1.13 0.67,-1.97 0.62,-4.04 l -0.03,-1.60 0.49,-0.03 c 0.39,-0.02 0.63,0.04 1.24,0.36 0.70,0.37 0.78,0.38 1.46,0.32 0.949,-0.08 2.205,-0.49 3.214,-1.04 0.444,-0.24 0.916,-0.49 1.046,-0.56 0.281,-0.14 0.373,-0.34 1.335,-3.14 0.826,-2.37 1.051,-2.75 1.743,-2.75 0.579,0 1.471,0.71 1.471,1.16 0,0.15 -0.368,0.81 -0.874,1.57 -1.056,1.57 -1.607,2.65 -1.607,3.21 0,0.36 0.03,0.42 0.402,0.57 0.435,0.17 1.213,0.87 1.213,1.07 0,0.06 -0.205,0.43 -0.451,0.81 -0.544,0.82 -0.838,1.60 -0.838,2.22 -0.00,0.25 0.199,1.35 0.432,2.44 0.43,1.98 0.432,1.99 0.266,2.59 -0.09,0.33 -0.205,1.02 -0.249,1.54 l -0.07,0.93 -0.757,0.37 c -0.414,0.20 -1.054,0.48 -1.41,0.61 c -0.618,-0.43 -1.19,-0.49 -1.513,-0.14 -0.111,0.12 -0.441,0.59 -0.749,1.05 -0.664,1.00 -0.857,1.11 -3.774,2.13 -4.05,1.41 -4.38,1.47 -6.47,1.21 z",
                    // dog
                    "m -2, 11 c -0.12,-0.04 -0.52,-0.16 -0.89,-0.27 l -0.61,-0.55 v 0 c 0.06,-0.46 0.42,-0.97 0.88,-1.25 0.69,-0.42 0.16,0.48 0,0 -0.18,-0.54 -0.38,-1.04 -0.08,-1.64 0,0 0.02,-1.37 -0.44,-1.44 -0.49,-0.07 0.23,-0.33 0,0 -0.18,0.26 -0.28,0.53 -0.78,2.13 -0.18,0.59 -0.41,1.15 -0.50,1.24 -0.14,0.14 -0.31,0.16 -1.02,0.16 h -0.85 l -0.46,-0.86 -0.14,-1.23 0.50,-0.92 c 0.17,-0.20 -0.10,0.30 0,0 0.19,-0.58 0.36,-1.84 0.36,-2.67 5.4e-4,-0.34 0.11,-0.81 0.42,-1.65 0.23,-0.64 0.40,-1.18 0.37,-1.21 -0.022,-0.02 -0.26,0.04 -0.53,0.15 -0.40,0.16 -0.67,0.19 -1.58,0.20 -0.98,0.003 -1.13,-0.01 -1.59,-0.23 -0.52,-0.24 -0.82,-0.56 -1.14,-1.21 -0.15,-0.31 -0.17,-0.48 -0.12,-1.36 0.05,-0.96 0.06,-1.02 0.38,-1.49 0.17,-0.26 0.70,-0.91 1.17,-1.42 0.83,-0.92 0.84,-0.94 0.88,-1.46 0.03,-0.48 0.01,-0.56 -0.28,-1.00 -0.40,-0.60 -0.41,-0.88 -0.041,-1.30 0.37,-0.43 1.36,-1.13 1.59,-1.13 0.15,0 0.18,-0.08 0.24,-0.65 0.03,-0.36 0.09,-0.79 0.12,-0.96 l 0.06,-0.31 0.57,0.70 c 0.59,0.73 0.72,0.76 0.73,0.20 10e-4,-0.26 0.17,-1.05 0.23,-1.05 0.79,0 2.73,2.70 3.04,3.12 0.76,0.88 1.66,2.22 1.87,2.79 0.05,0.13 0.141,0.24 0.201,0.24 0.06,-9.69e-4 1.32,-0.20 2.81,-0.44 2.79,-0.45 2.70,-0.43 3.40,-0.97 0.01,-0.01 0.20,-0.64 0.41,-1.39 0.21,-0.75 0.40,-1.39 0.43,-1.42 0.03,-0.02 0.23,0.09 0.45,0.27 0.54,0.44 0.88,1.14 0.93,1.96 l 0.04,0.63 0.75,0.80 c 0.86,0.92 0.89,1.01 0.89,2.44 0,0.71 -0.04,1.05 -0.16,1.37 -0.19,0.49 -0.20,0.40 0.35,3.52 l 0.40,2.22 -0.29,0.80 -0.29,0.80 -0.75,0.02 c -0.44,0.01 -0.80,-0.01 -0.87,-0.07 -0.08,-0.06 -0.12,-0.43 -0.15,-1.15 -0.027,-0.80 -0.07,-1.13 -0.20,-1.37 -0.19,-0.36 -1.14,-1.52 -1.26,-1.53 -0.04,-0.00 -0.03,-0.42 0,0 0.05,0.70 0.03,1.59 -0.15,1.99 -0.18,0.40 -0.25,0.45 -0.73,0.61 l -0.52,0.17 -0.24,-0.69 c -0.13,-0.38 -0.29,-0.82 -0.36,-0.98 l -0.11,-0.29 -0.54,0.54 c -1.08,0.75 -1.86,1.09 -2.63,0.90 -0.17,-0.04 -0.32,-0.07 -0.33,-0.06 -0.14,0.14 -1.03,2.94 -1.431,4.49 -0.27,1.07 -0.52,2.07 -0.56,2.22 -0.061,0.21 -0.21,0.34 -0.79,0.65 -0.39,0.21 -0.74,0.38 -0.76,0.37 -0.02,-0.00 -0.14,-0.03 -0.27,-0.08 z",
                    // wheelbarrow
                    "m -10, 5 c -1.00,-0.30 -1.46,-1.02 -1.45,-2.29 0.00,-0.85 0.15,-1.45 0.46,-1.89 0.28,-0.40 1.68,-1.32 2.00,-1.32 0.15,0.00 0.53,0.16 0.84,0.35 0.63,0.40 0.87,0.44 1.01,0.16 0.30,-0.56 0.35,-1.26 0.35,-5.01 l 0.00,-3.83 3.24,-0.49 3.24,-0.49 1.819,0.75 1.812,0.75 1.686,-0.03 c 1.948,-0.03 2.392,0.04 3.673,0.69 0.71,0.36 0.86,0.48 1.29,1.10 0.81,1.15 0.57,1.09 2.11,0.58 0.731,-0.24 1.429,-0.42 1.526,-0.39 0.139,0.04 0.185,0.16 0.185,0.45 v 0.39 l -1.919,0.75 -1.91,0.75 -0.72,1.70 c -0.614,1.46 -0.754,1.70 -0.949,1.70 -0.137,0 -0.623,-0.35 -1.245,-0.91 -0.564,-0.50 -1.081,-0.92 -1.153,-0.92 -0.07,-5.36e-4 -1.926,0.62 -4.111,1.39 -3.645,1.27 -4.155,1.43 -5.915,1.76 l -1.93,0.36 -0.13,0.66 c -0.15,0.75 -0.78,2.14 -1.20,2.63 -0.43,0.51 -0.95,0.73 -1.71,0.72 -0.35,-0.00 -0.76,-0.04 -0.92,-0.09 z",
            ]

            function getRandomInt(max) {
              return Math.floor(Math.random() * Math.floor(max));
            }

            const token_path = tokens[getRandomInt(tokens.length)]

            /*---------------------------------------------*
             *
             * draw grid
             *
             *---------------------------------------------*/
            for (let i=0; i < h; i += 1) {
                for (let j=0; j < w; j += 1) {
                    paper.rect(
                        SIZE*j+os,
                        SIZE*i+os,
                        SIZE, SIZE).attr(attr.rect.empty)
                }
            }

            /*---------------------------------------------*
             *
             * draw number
             *
             *---------------------------------------------*/
            const d = [[0, -1], [-1, 0], [0, 1], [1, 0]]
            const cycle = edge - 1
            const len = cycle * 4
            let [y, x] = [cycle, cycle]
            coords = []

            for (let i = 0; i < cycle*4; i += 1) {
                const [dy, dx] = d[Math.floor(i / cycle)]
                y += dy
                x += dx
                coords.push([y, x])
                draw_number([y, x], (i+1)%(cycle*4))
            }

            const tail = coords.pop()
            coords.unshift(tail)

            /*---------------------------------------------*
             *
             * draw line
             *
             *---------------------------------------------*/
            const fn = c => c*SIZE + os + SIZE/2
            const stroke_width = 14 / edge

            let py = fn(coords[you][0])
            let px = fn(coords[you][1])
            let i = you

            let line_path = 'M ' + px + ',' + py

            while (i !== you+die) {

                i += die > 0 ? 1: -1
                let idx

                if (i >= 0) {
                    idx = i % len
                } else {
                    idx = i
                    while (idx < 0) {
                        idx += len
                    }
                }

                let ny = fn(coords[idx][0])
                let nx = fn(coords[idx][1])

                line_path += ' L' + nx + ' ' + ny

                if (i === you+die) {
                    paper.path('M ' + nx + ',' + ny + token_path).attr(
                        attr.number).scale(10/edge)
                }
            }

            if (die === 0) {
                paper.path('M ' + px + ',' + py + token_path).attr(
                    attr.number).scale(10/edge)
            } else {
                paper.path(line_path).attr(attr.line).attr(
                    {'stroke-width': stroke_width,}).attr(
                    {'arrow-end': 'block-wide-long',})
            }

            /*----------------------------------------------*
             *
             * draw number
             *
             *----------------------------------------------*/
            function draw_number(co, num) {
                const [i, j] = co
                const y = i * SIZE + os + SIZE/2
                const x = j * SIZE + os + SIZE/2

                const n = paper.text(x, y, num).attr(attr.number)
                n.attr({'font-size': 198/edge})

                if (num===you) {
                    n.attr(attr.you)
                }
            }
        }

        var $tryit;
        var io = new extIO({
            multipleArguments: true,
            functions: {
                js: 'squareBoard',
                python: 'square_board'
            },
            animation: function($expl, data){
                squareBoardCanvas(
                    $expl[0],
                    data.in,
                );
            }
        });
        io.start();
    }
);
